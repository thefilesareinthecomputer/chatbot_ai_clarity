Create a functional GUI that displays in the IDE output of this program that serves as the chat interface to generate data visualizations on the app webpage (localhost). Integrate the GUI output with the Flask web framework and serve the data visualizations on a webpage (localhost). To display the visualizations, use the Plotly JavaScript library. Modify the code block below based on the above requirements.


# main.py

from flask import Flask, render_template, request
import tensorflow as tf
import nltk
import tensorflow_datasets as tfds
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import os
import openpyxl

app = Flask(__name__)
nltk.download("popular")
datasets = tfds.load("imdb_reviews", as_supervised=True)
pd.options.display.max_rows = 10
pd.options.display.float_format = "{:.1f}".format
sns.set()

def get_sentiments(review):
    # your code here
    sentiment = tf.constant([[1.0, 0.0]])
    return sentiment

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/process_text", methods=["POST"])
def process_text():
    try:
        user_input = request.form["user-input"]
    except KeyError:
        return "BadRequestKeyError: user-input field not found in the request form"
    # rest of the code to process the user's input and return a response

directories = ['data_files/purchases', 'data_files/sales', 'data_files/variances']

def create_dataframe(directories):
    dataframes = []
    for directory in directories:
        for filename in os.listdir(directory):
            if filename.endswith(".xlsx"):
                file_path = os.path.join(directory, filename)
                df = pd.read_excel(file_path)
                dataframes.append(df)
    return pd.concat(dataframes)

df = create_dataframe(directories)

if __name__ == "__main__":
    app.run()


# my_gui.py

import tkinter as tk
import requests

class ChatInterface(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        self.title("Clarity Chatbot")

        # create chat window
        self.chat_window = tk.Text(self, height=20, width=50)
        self.chat_window.pack(pady=10)

        # create input field
        self.entry_field = tk.Entry(self, width=50)
        self.entry_field.pack(pady=10)
        self.entry_field.focus()

        # bind the enter key to the send_message method
        self.entry_field.bind("<Return>", self.send_message)

    def send_message(self, event=None):
        user_input = self.entry_field.get()

        # insert user's message into the chat window
        self.chat_window.insert(tk.END, "You: " + user_input + "\n")

        # clear the input field
        self.entry_field.delete(0, tk.END)

        # get response from chatbot and insert it into the chat window
        chatbot_response = self.get_response(user_input)
        self.chat_window.insert(tk.END, "Clarity: " + chatbot_response + "\n")

    def get_response(self, user_input):
        # make a request to the Flask app to get a response from the chatbot
        response = requests.get(f"http://localhost:5000/query?msg={user_input}")
        return response.text

if __name__ == "__main__":
    app = ChatInterface()
    app.mainloop()












###########################################################













My website displays this error:
Traceback (most recent call last):
  File "/Users/aw/PycharmProjects/inventory_ai/venv/lib/python3.10/site-packages/flask/app.py", line 2548, in __call__
    return self.wsgi_app(environ, start_response)
  File "/Users/aw/PycharmProjects/inventory_ai/venv/lib/python3.10/site-packages/flask/app.py", line 2528, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/aw/PycharmProjects/inventory_ai/venv/lib/python3.10/site-packages/flask/app.py", line 2525, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/aw/PycharmProjects/inventory_ai/venv/lib/python3.10/site-packages/flask/app.py", line 1822, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/aw/PycharmProjects/inventory_ai/venv/lib/python3.10/site-packages/flask/app.py", line 1820, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/aw/PycharmProjects/inventory_ai/venv/lib/python3.10/site-packages/flask/app.py", line 1796, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File "/Users/aw/PycharmProjects/inventory_ai/main.py", line 46, in process_text
    user_input = request.form["user-input"]
  File "/Users/aw/PycharmProjects/inventory_ai/venv/lib/python3.10/site-packages/werkzeug/datastructures.py", line 375, in __getitem__
    raise exceptions.BadRequestKeyError(key)
werkzeug.exceptions.BadRequestKeyError: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.
KeyError: 'user-input'


Based on this program:

# main.py
```
from flask import Flask, render_template
import tensorflow as tf
import nltk
import tensorflow_datasets as tfds
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

app = Flask(__name__)
nltk.download("popular")
datasets = tfds.load("imdb_reviews", as_supervised=True)
pd.options.display.max_rows = 10
pd.options.display.float_format = "{:.1f}".format
sns.set()

@app.route("/")
def home():
    return render_template("index.html")

if __name__ == "__main__":
    app.run()
```

# my_gui.py
```
import tkinter as tk
import requests

class ChatInterface(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        self.title("Clarity Chatbot")

        # create chat window
        self.chat_window = tk.Text(self, height=20, width=50)
        self.chat_window.pack(pady=10)

        # create input field
        self.entry_field = tk.Entry(self, width=50)
        self.entry_field.pack(pady=10)
        self.entry_field.focus()

        # bind the enter key to the send_message method
        self.entry_field.bind("<Return>", self.send_message)

    def send_message(self, event=None):
        user_input = self.entry_field.get()

        # insert user's message into the chat window
        self.chat_window.insert(tk.END, "You: " + user_input + "\n")

        # clear the input field
        self.entry_field.delete(0, tk.END)

        # get response from chatbot and insert it into the chat window
        chatbot_response = self.get_response(user_input)
        self.chat_window.insert(tk.END, "Clarity: " + chatbot_response + "\n")

    def get_response(self, user_input):
        # make a request to the Flask app to get a response from the chatbot
        response = requests.get(f"http://localhost:5000/query?msg={user_input}")
        return response.text

if __name__ == "__main__":
    app = ChatInterface()
    app.mainloop()
```

and this 
index.html
```
<!DOCTYPE html>
<html>
  <head>
    <title>ChatBot Interface</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
      .container {
        width: 500px;
        margin: 0 auto;
        text-align: center;
      }
      #chatbox {
        width: 100%;
        height: 300px;
        overflow-y: scroll;
        margin-top: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #eee;
      }
      .message {
        margin-bottom: 10px;
      }
      #input {
        width: 60%;
        padding: 10px;
        margin-top: 20px;
      }
      button {
        padding: 10px 20px;
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>ChatBot Interface</h1>
      <div id="chatbox"></div>
      <input type="text" id="input" placeholder="Enter your message here">
      <button id="btn">Send</button>
    </div>

    <script>
      $(document).ready(function() {
        $("#input").keypress(function(event) {
          if (event.which == 13) {
            event.preventDefault();
            sendMessage();
          }
        });
        $("#btn").click(function() {
          sendMessage();
        });
      });
      function sendMessage() {
        var message = $("#input").val();
        $("#input").val("");
        $("#chatbox").append("<div class='message'><b>You:</b> " + message + "</div>");
        $.get("/get", { msg: message }).done(function(data) {
          $("#chatbox").append("<div class='message'><b>ChatBot:</b> " + data + "</div>");
        });
      }
    </script>
  </body>
</html>
```